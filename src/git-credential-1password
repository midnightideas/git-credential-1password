#!/usr/bin/env bash

account="$1"
item_name="$2"
git_credential_action="$3"

op_session_path="$HOME"/.opsession/$account
mkdir -p "$HOME"/.opsession
touch "$op_session_path"
chmod 600 "$op_session_path"

op_session_varname=OP_SESSION_$account
export "$op_session_varname"="$(cat "$op_session_path")"

function handle_signin_response() {
  if [[ -z ${!op_session_varname} ]]; then
    echo '❌ Unable to login.'
    exit 1
  else
    echo '✅ Login successful.'
  fi
}

function auto_signin() {
  echo '❓ Checking if there is an existing session.'
  if [[ -z ${!op_session_varname} ]]; then
    echo '❌ Cannot find an existing session. To log in again.'
    export "$op_session_varname"="$(op signin "$account" --output=raw | tee "$op_session_path")"
    handle_signin_response
  else
    echo '❓ Found an existing session. Checking if the session is still active.'
    if ! op list vaults --account="$account" >/dev/null 2>&1; then
      echo '❌ Session expired. To log in again.'
      export "$op_session_varname"="$(op signin "$account" --output=raw | tee "$op_session_path")"
      handle_signin_response
    else
      echo '✅ Found an existing and active session.'
    fi
  fi
}

function get_credential() {
  credential=$(op get item "$item_name" --account="$account" --fields username,password,url --format json)

  ssh_user="$(echo "$credential" | jq -r .username)"
  ssh_pass="$(echo "$credential" | jq -r .password)"

  echo username="$ssh_user"
  echo password="$ssh_pass"
}

case "$git_credential_action" in

'get')
  auto_signin
  get_credential
  ;;

esac
